// ATD Modified version of:
// https://github.com/coreos/prometheus-operator/blob/master/contrib/kube-prometheus/example.jsonnet

local kp = (import 'kube-prometheus/kube-prometheus.libsonnet') +
           (import 'kube-prometheus/kube-prometheus-node-ports.libsonnet') + {
  _config+:: {
    namespace: "monitoring",
    prometheus+:: {
      replicas: 2,
    },
    alertmanager+:: {
      config: importstr 'atd-alertmanager-config.yml',
      replicas: 2,
    },
  },
  prometheus+: {
    prometheus+: {
      spec+: {
        storage: {
          volumeClaimTemplate: {
            spec: {
              storageClassName: 'sc-pro1',
              accessModes: ['ReadWriteOnce'],
              resources: {
                requests: {
                  storage: '20Gi',
                },
              },
            },
          },
        },
      },
    },
  },
};

{ ['00namespace-' + name + '.json']: kp.kubePrometheus[name] for name in std.objectFields(kp.kubePrometheus) } +
{ ['0prometheus-operator-' + name + '.json']: kp.prometheusOperator[name] for name in std.objectFields(kp.prometheusOperator) } +
{ ['node-exporter-' + name + '.json']: kp.nodeExporter[name] for name in std.objectFields(kp.nodeExporter) } +
{ ['kube-state-metrics-' + name + '.json']: kp.kubeStateMetrics[name] for name in std.objectFields(kp.kubeStateMetrics) } +
{ ['alertmanager-' + name + '.json']: kp.alertmanager[name] for name in std.objectFields(kp.alertmanager) } +
{ ['prometheus-' + name + '.json']: kp.prometheus[name] for name in std.objectFields(kp.prometheus) } +
{ ['grafana-' + name + '.json']: kp.grafana[name] for name in std.objectFields(kp.grafana) }
